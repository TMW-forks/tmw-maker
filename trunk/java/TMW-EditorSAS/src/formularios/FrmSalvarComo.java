/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FrmSalvarComo.java
 *
 * Created on 12/02/2013, 15:44:23
 */
package formularios;

import classes.FileClass;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author lunovox
 */
public class FrmSalvarComo extends javax.swing.JDialog {

	/** Creates new form FrmSalvarComo */
	public FrmSalvarComo(FrmEditorSAS parent, boolean modal) {
		super(parent, modal);
		frmAnimationEditor = parent;
		File $File = new File((new File(frmAnimationEditor.sptMainImg.getEndereco())).getName().replaceAll("png", "sas"));
		LocalPadrao = frmAnimationEditor.pastaDeSprites + bar + (new File(frmAnimationEditor.sptMainImg.getEndereco())).getName().replaceAll("png", "sas");
		dialogo.setSelectedFile(new File(LocalPadrao));
		initComponents();
		txtSpriteUrl.setText(LocalPadrao);
	}
	FrmEditorSAS frmAnimationEditor;
	JFileChooser dialogo = new JFileChooser();
	private String bar = System.getProperty("file.separator");
	String LocalPadrao = "";

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      txtSpriteUrl = new javax.swing.JTextField();
      btnLocal = new javax.swing.JButton();
      chkImportar = new javax.swing.JCheckBox();
      jSeparator1 = new javax.swing.JSeparator();
      btnCancelar = new javax.swing.JButton();
      btnSalvar = new javax.swing.JButton();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("Salvar Como");
      setResizable(false);

      txtSpriteUrl.setEditable(false);
      txtSpriteUrl.setText("/home/lunovox/Desenvolvimento/TMW/localhost/tmwdata/graphics/sprites/teste.xml");
      txtSpriteUrl.setEnabled(false);

      btnLocal.setMnemonic('L');
      btnLocal.setText("Local");
      btnLocal.setEnabled(false);
      btnLocal.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnLocalActionPerformed(evt);
         }
      });

      chkImportar.setSelected(true);
      chkImportar.setText("Importar Sprite e Animação para pasta padrão do localhost");
      chkImportar.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            chkImportarStateChanged(evt);
         }
      });

      btnCancelar.setMnemonic('C');
      btnCancelar.setText("Cancelar");
      btnCancelar.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnCancelarActionPerformed(evt);
         }
      });

      btnSalvar.setMnemonic('S');
      btnSalvar.setText("Salvar");
      btnSalvar.setEnabled(false);
      btnSalvar.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnSalvarActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(txtSpriteUrl, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(btnLocal))
               .addComponent(chkImportar)
               .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                  .addComponent(btnSalvar)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(btnCancelar)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(chkImportar)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(txtSpriteUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(btnLocal))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(btnCancelar)
               .addComponent(btnSalvar))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnLocal, txtSpriteUrl});

      pack();
   }// </editor-fold>//GEN-END:initComponents

	 private void btnLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLocalActionPerformed
		 dialogo.setDialogTitle("Seleção do Local de Exportação");
		 dialogo.resetChoosableFileFilters();
		 dialogo.setFileFilter(new FileNameExtensionFilter("Sequência de Animações de Sprite(*.sas)", "sas"));
		 dialogo.addChoosableFileFilter(new FileNameExtensionFilter("Arquivo XML(*.xml)", "xml"));
		 dialogo.setAcceptAllFileFilterUsed(false);

		 //int Teste = dialogo.showOpenDialog(this);
		 int Teste = dialogo.showSaveDialog(this);
		 if (Teste == JFileChooser.APPROVE_OPTION) {
			 txtSpriteUrl.setText(dialogo.getSelectedFile().getPath());
			 btnSalvar.setEnabled(!txtSpriteUrl.getText().isEmpty() && FileClass.seExiste(txtSpriteUrl.getText()));
		 } else {
			 //log.append("Open command cancelled by user.");
		 }
}//GEN-LAST:event_btnLocalActionPerformed

	 private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
		 this.dispose();
}//GEN-LAST:event_btnCancelarActionPerformed

	 private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
		 File $Main = new File(txtSpriteUrl.getText());
		 String $srcMain = "graphics" + bar + "sprites" + bar + $Main.getName();
		 //String $srcMain = "graphics" + bar + "sprites" + bar + dialogo.getSelectedFile().getName();
		 /*ImagemClass imgBase = new ImagemClass(txtSpriteUrl.getText());
		 int $LargMain = imgBase.getLargura() / Integer.parseInt(spnSpriteColunas.getValue().toString());
		 int $AltuMain = imgBase.getAltura() / Integer.parseInt(spnSpriteLinhas.getValue().toString());

		 frmAnimationEditor.sptMainUrl = txtSpriteUrl.getText();
		 //frmAnimationEditor.sptMainUrl = frmAnimationEditor.pastaDeTmwData +bar+ $ImageTag.getAttribute("src");
		 if (FileClass.seExiste(frmAnimationEditor.sptMainUrl)) {
		 frmAnimationEditor.sptMainImg = imgBase;
		 frmAnimationEditor.sptMainWidth = $LargMain;
		 frmAnimationEditor.sptMainHeight = $AltuMain;
		 frmAnimationEditor.sldFrameImagem.setValue(0);
		 frmAnimationEditor.sldFrameImagem.setMaximum((Integer.parseInt(spnSpriteColunas.getValue().toString())*Integer.parseInt(spnSpriteLinhas.getValue().toString()))-1);
		 frmAnimationEditor.sldSeqStart.setValue(0);
		 frmAnimationEditor.sldSeqStart.setMaximum(frmAnimationEditor.sldFrameImagem.getMaximum());
		 frmAnimationEditor.sldSeqEnd.setMinimum(frmAnimationEditor.sldSeqStart.getValue());
		 frmAnimationEditor.sldSeqEnd.setMaximum(frmAnimationEditor.sldFrameImagem.getMaximum());
		 if(frmAnimationEditor.sldSeqEnd.getValue()<frmAnimationEditor.sldSeqEnd.getMinimum()){frmAnimationEditor.sldSeqEnd.setValue(frmAnimationEditor.sldSeqEnd.getMinimum());}
		 frmAnimationEditor.sldFrameImagem.setMajorTickSpacing(frmAnimationEditor.sldFrameImagem.getMaximum() / 4);
		 frmAnimationEditor.sldSeqStart.setMajorTickSpacing(frmAnimationEditor.sldSeqStart.getMaximum() / 4);
		 frmAnimationEditor.sldSeqEnd.setMajorTickSpacing(frmAnimationEditor.sldSeqEnd.getMaximum() / 4);
		 frmAnimationEditor.tplFrameSeq.setSelectedIndex(0);
		 } else {
		 DialogClass.showErro(
		 "<HTML>Não foi possÍvel encontrar a imagem principal declarada na XML.<br>"
		 + "'<font color='#FF0000'>" + frmAnimationEditor.sptBaseUrl + "</font>'", "URL INVÁLIDA");
		 frmAnimationEditor.sptMainUrl = "";
		 frmAnimationEditor.sptMainImg = null;
		 frmAnimationEditor.sptMainWidth = 0;
		 frmAnimationEditor.sptMainHeight = 0;
		 }

		 if (!cmbBase.getSelectedItem().toString().equals("<NENHUMA>")) {
		 Vector $Action = new Vector();
		 String $urlBase = frmAnimationEditor.pastaDeSprites + bar + cmbBase.getSelectedItem().toString();
		 frmAnimationEditor.xmlBase = FileClass.arquivoAbrirXML($urlBase);
		 frmAnimationEditor.xmlMain = FileClass.arquivoAbrirXML($urlBase);
		 NodeList $MainNode = frmAnimationEditor.xmlMain.getChildNodes();
		 for (int $ac = 0; $ac < frmAnimationEditor.xmlMain.getChildNodes().getLength(); $ac++) {
		 if ($MainNode.item($ac).getNodeName().equals("imageset")) {
		 Element $ImageTag = (Element) $MainNode.item($ac);


		 //((Element)frmAnimationEditor.xmlBase.getChildNodes().item($a)).setAttribute("src", "graphics" +bar+ "sprites" +bar+ dialogo.getSelectedFile().getName());
		 //((Element)frmAnimationEditor.xmlBase.getChildNodes().item($a)).setAttribute("width", String.valueOf(miniatura.getLargura()/Integer.parseInt(spnSpriteColunas.getValue().toString())));
		 //((Element)frmAnimationEditor.xmlBase.getChildNodes().item($a)).setAttribute("height", String.valueOf(miniatura.getAltura()/Integer.parseInt(spnSpriteLinhas.getValue().toString())));
		 $ImageTag.setAttribute("src", $srcMain);
		 $ImageTag.setAttribute("width", String.valueOf($LargMain));
		 $ImageTag.setAttribute("height", String.valueOf($AltuMain));

		 frmAnimationEditor.sptBaseUrl = frmAnimationEditor.pastaDeTmwData +bar+ ((Element)frmAnimationEditor.xmlBase.getChildNodes().item($ac)).getAttribute("src").split("\\|")[0];
		 if (FileClass.seExiste(frmAnimationEditor.sptBaseUrl)) {
		 frmAnimationEditor.sptBaseImg = new ImagemClass(frmAnimationEditor.sptBaseUrl);
		 frmAnimationEditor.sptBaseWidth = Integer.parseInt(((Element)frmAnimationEditor.xmlBase.getChildNodes().item($ac)).getAttribute("width"));
		 frmAnimationEditor.sptBaseHeight = Integer.parseInt(((Element)frmAnimationEditor.xmlBase.getChildNodes().item($ac)).getAttribute("height"));
		 } else {
		 DialogClass.showErro(
		 "<HTML>Não foi possÍvel encontrar a imagem base declarada na XML.<br>"
		 + "'<font color='#FF0000'>" + frmAnimationEditor.sptBaseUrl + "</font>'", "URL INVÁLIDA");
		 frmAnimationEditor.sptBaseUrl = "";
		 frmAnimationEditor.sptBaseImg = null;
		 frmAnimationEditor.sptBaseWidth = 0;
		 frmAnimationEditor.sptBaseHeight = 0;
		 }
		 } else if ($MainNode.item($ac).getNodeName().equals("action")) {
		 Element $ActionTag = (Element) $MainNode.item($ac);
		 $Action.addElement($ActionTag.getAttribute("name"));
		 NodeList $ActionNode = $ActionTag.getChildNodes();
		 for (int $an = 0; $an < $ActionNode.getLength(); $an++) {
		 if ($ActionNode.item($an).getNodeName().equals("animation")) {
		 Element $AnimationTag = (Element) $ActionNode.item($an);
		 NodeList $FrameSeqNode = $AnimationTag.getChildNodes();
		 for (int $fs = 0; $fs < $FrameSeqNode.getLength(); $fs++) {
		 if ($FrameSeqNode.item($fs).getNodeName().equals("frame")) {
		 Element $FrameSeqTag = (Element) $FrameSeqNode.item($fs);
		 $FrameSeqTag.setAttribute("index", "0");
		 } else if ($FrameSeqNode.item($fs).getNodeName().equals("sequence")) {
		 Element $FrameSeqTag = (Element) $FrameSeqNode.item($fs);
		 $FrameSeqTag.setAttribute("start", "0");
		 $FrameSeqTag.setAttribute("end", "0");
		 }
		 }
		 }
		 }
		 }
		 }

		 frmAnimationEditor.cmbAction.setModel(new javax.swing.DefaultComboBoxModel($Action.toArray()));
		 frmAnimationEditor.cmbAction.setEnabled(true);
		 //frmAnimationEditor.btnActionNew.setEnabled(true);
		 //frmAnimationEditor.btnActionDel.setEnabled(true);
		 frmAnimationEditor.zoom = 1.0;
		 frmAnimationEditor.ListarAnimation();
		 frmAnimationEditor.ListarFrameSequence();
		 frmAnimationEditor.RedesenhaPalco();
		 } else {
		 frmAnimationEditor.sptBaseUrl = "";
		 frmAnimationEditor.sptBaseImg = null;
		 frmAnimationEditor.sptBaseWidth = 0;
		 frmAnimationEditor.sptBaseHeight = 0;

		 frmAnimationEditor.cmbAction.setModel(new javax.swing.DefaultComboBoxModel(new Vector()));
		 frmAnimationEditor.cmbAnimation.setModel(new javax.swing.DefaultComboBoxModel(new Vector()));
		 frmAnimationEditor.cmbFrameSeq.setModel(new javax.swing.DefaultComboBoxModel(new Vector()));
		 frmAnimationEditor.cmbAction.setEnabled(false);
		 frmAnimationEditor.cmbAnimation.setEnabled(false);
		 frmAnimationEditor.cmbFrameSeq.setEnabled(false);
		 frmAnimationEditor.tplFrameSeq.setEnabled(false);
		 frmAnimationEditor.lblFrameImagem.setEnabled(false);
		 frmAnimationEditor.lblSeqStart.setEnabled(false);
		 frmAnimationEditor.lblSeqEnd.setEnabled(false);
		 frmAnimationEditor.sldFrameImagem.setEnabled(false);
		 frmAnimationEditor.sldSeqStart.setEnabled(false);
		 frmAnimationEditor.sldSeqEnd.setEnabled(false);

		 //frmAnimationEditor.pnlFrame.setEnabled(false);
		 //frmAnimationEditor.pnlSequence.setEnabled(false);
		 //frmAnimationEditor.pnlEnd.setEnabled(false);
		 }
		 frmAnimationEditor.RedesenhaPalco();/**/
		 this.dispose();
}//GEN-LAST:event_btnSalvarActionPerformed

	 private void chkImportarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkImportarStateChanged
		 txtSpriteUrl.setEnabled(!chkImportar.isSelected());
		 btnLocal.setEnabled(!chkImportar.isSelected());
	 }//GEN-LAST:event_chkImportarStateChanged

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {

			public void run() {
				FrmSalvarComo dialog = new FrmSalvarComo(new FrmEditorSAS(), true);
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {

					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton btnCancelar;
   private javax.swing.JButton btnLocal;
   private javax.swing.JButton btnSalvar;
   private javax.swing.JCheckBox chkImportar;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JTextField txtSpriteUrl;
   // End of variables declaration//GEN-END:variables
}
