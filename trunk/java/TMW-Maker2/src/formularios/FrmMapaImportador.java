/**
 * @author lunovox
 * FrmMapaImportador.java
 * Created on 01/02/2013, 14:55:03
 */

package formularios;

import classes.DialogClass;
import classes.FileClass;
import java.awt.Dialog;
import java.io.File;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class FrmMapaImportador extends javax.swing.JDialog {

	public FrmMapaImportador(FrmImportador parent, boolean modal, String $PastaLocalhost) {
		super(parent, modal);
		frmImportador=parent;
		pastaLocalhost=$PastaLocalhost;

		//baseScripts = pastaLocalhost + Barra + "eathena-data" + Barra + "npc";
		pastaDeMapas		= pastaLocalhost + bar + "tmwdata" + bar + "maps";
		pastaDeTilesets	= pastaLocalhost + bar + "tmwdata" + bar + "graphics"+ bar + "tiles";
		pastaDeColisoes	= pastaLocalhost + bar + "eathena-data" + bar + "data";
		initComponents();
	}
	FrmImportador frmImportador;
	private static String bar = System.getProperty("file.separator");
	String pastaLocalhost;
	private static String pastaDeMapas;
	private static String pastaDeColisoes;
	private static String pastaDeTilesets;
	JFileChooser Dialogo = new JFileChooser();;

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jLabel1 = new javax.swing.JLabel();
      txtMapaTMX = new javax.swing.JTextField();
      btnSelecionarTMX = new javax.swing.JButton();
      jLabel2 = new javax.swing.JLabel();
      txtColisoesWLK = new javax.swing.JTextField();
      btnSelecionarWLK = new javax.swing.JButton();
      jSeparator1 = new javax.swing.JSeparator();
      btnCancelar = new javax.swing.JButton();
      btnImportar = new javax.swing.JButton();
      chkAddTilesets = new javax.swing.JCheckBox();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("Importar Mapa e Colisões");
      setResizable(false);

      jLabel1.setText("Mapa TMX:");

      txtMapaTMX.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.shadow"));
      txtMapaTMX.setEditable(false);

      btnSelecionarTMX.setText("Selecionar");
      btnSelecionarTMX.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnSelecionarTMXActionPerformed(evt);
         }
      });

      jLabel2.setText("Colisões WLK:");

      txtColisoesWLK.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.shadow"));
      txtColisoesWLK.setEditable(false);

      btnSelecionarWLK.setText("Selecionar");
      btnSelecionarWLK.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnSelecionarWLKActionPerformed(evt);
         }
      });

      btnCancelar.setText("Cancelar");
      btnCancelar.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnCancelarActionPerformed(evt);
         }
      });

      btnImportar.setText("Importar");
      btnImportar.setEnabled(false);
      btnImportar.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnImportarActionPerformed(evt);
         }
      });

      chkAddTilesets.setSelected(true);
      chkAddTilesets.setText("Adicionar tilesets ao repositório");

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                     .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(txtMapaTMX, javax.swing.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
                     .addComponent(txtColisoesWLK, javax.swing.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
                     .addComponent(chkAddTilesets))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(btnSelecionarTMX, javax.swing.GroupLayout.Alignment.TRAILING)
                     .addComponent(btnSelecionarWLK, javax.swing.GroupLayout.Alignment.TRAILING)))
               .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                  .addComponent(btnImportar)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(btnCancelar)))
            .addContainerGap())
      );

      layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCancelar, btnImportar});

      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel1)
               .addComponent(btnSelecionarTMX)
               .addComponent(txtMapaTMX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel2)
               .addComponent(btnSelecionarWLK)
               .addComponent(txtColisoesWLK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(chkAddTilesets)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(btnCancelar)
               .addComponent(btnImportar))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnSelecionarTMX, btnSelecionarWLK, jLabel1, jLabel2, txtColisoesWLK, txtMapaTMX});

      pack();
   }// </editor-fold>//GEN-END:initComponents

	 private void btnSelecionarTMXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarTMXActionPerformed
		//final JFileChooser Dialogo = new JFileChooser();
		//Dialogo.addChoosableFileFilter(new FileNameExtensionFilter("Mapa TMX", "tmx"));
		Dialogo.resetChoosableFileFilters();
		Dialogo.setFileFilter(new FileNameExtensionFilter("Mapa TMX", "tmx"));
		//Dialogo.addChoosableFileFilter(new FileNameExtensionFilter("Collision WLK", "wlk"));
		Dialogo.setAcceptAllFileFilterUsed(false);
		//Dialogo.setCurrentDirectory(new File(FileClass.getPastaDoUsuario()));


		int Teste = Dialogo.showOpenDialog(this);
		if (Teste == JFileChooser.APPROVE_OPTION) {
			File Arquivo = Dialogo.getSelectedFile();
			//This is where a real application would open the file.
			//log.append("Opening: " + Arquivo.getName());/**/
			/*FileClass.arquivoCopiar(
				Dialogo.getSelectedFile(),
				PastaDeSprites + FrmPrincipal.barra + Dialogo.getSelectedFile().getName()
			);/**/
			//CarregarSpritesPNG(Dialogo.getSelectedFile().getName());
			txtMapaTMX.setText(Arquivo.getPath());
			btnImportar.setEnabled(!txtMapaTMX.getText().isEmpty() && !txtColisoesWLK.getText().isEmpty());
		} else {
			//log.append("Open command cancelled by user.");
		}
	 }//GEN-LAST:event_btnSelecionarTMXActionPerformed
	 private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
		 this.dispose();
	 }//GEN-LAST:event_btnCancelarActionPerformed
	 private void btnSelecionarWLKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarWLKActionPerformed
		//final JFileChooser Dialogo = new JFileChooser();
		Dialogo.resetChoosableFileFilters();
		Dialogo.setFileFilter(new FileNameExtensionFilter("Colisões WLK", "wlk"));
		//Dialogo.addChoosableFileFilter(new FileNameExtensionFilter("Mapa TMX", "tmx"));
		Dialogo.setAcceptAllFileFilterUsed(false);
		//Dialogo.setCurrentDirectory(new File(FileClass.getPastaDoUsuario()));


		int Teste = Dialogo.showOpenDialog(this);
		if (Teste == JFileChooser.APPROVE_OPTION) {
			File Arquivo = Dialogo.getSelectedFile();
			//This is where a real application would open the file.
			//log.append("Opening: " + Arquivo.getName());/**/
			/*FileClass.arquivoCopiar(
				Dialogo.getSelectedFile(),
				PastaDeSprites + FrmPrincipal.barra + Dialogo.getSelectedFile().getName()
			);/**/
			//CarregarSpritesPNG(Dialogo.getSelectedFile().getName());
			txtColisoesWLK.setText(Arquivo.getPath());
			btnImportar.setEnabled(!txtMapaTMX.getText().isEmpty() && !txtColisoesWLK.getText().isEmpty());
		 }
	 }//GEN-LAST:event_btnSelecionarWLKActionPerformed
	 private void btnImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportarActionPerformed
		 File $ArqTMX = new File(txtMapaTMX.getText());
		 String $UrlDestinoTMX = pastaDeMapas + bar + $ArqTMX.getName();
 		 String $PastaDestinoTMX = $UrlDestinoTMX.replace(bar+$ArqTMX.getName(), "");
		 Element $ConteudoMapaTMX = FileClass.arquivoAbrirXML($ArqTMX.getPath());
		 Element $NovoMapaTMX = $ConteudoMapaTMX;
		 if (chkAddTilesets.isSelected()) {
			 //NodeList $TilesetNode = $ConteudoMapaTMX.getElementsByTagName("image");
			 NodeList $MapaNode = $ConteudoMapaTMX.getChildNodes();
			 for (int $m = 0; $m < $MapaNode.getLength(); $m++) {
				 if($MapaNode.item($m).getNodeName().equals("tileset")){
					 Element $TilesetTag = (Element) $MapaNode.item($m);
					 for (int $t = 0; $t < $TilesetTag.getChildNodes().getLength(); $t++) {
						 if($TilesetTag.getChildNodes().item($t).getNodeName().equals("image")){
							 Element $ImagemTag = (Element) $TilesetTag.getChildNodes().item($t);

							 String $UrlOrigemTileset = FileClass.getAtributo($ImagemTag, "source", "");
							 String $UrlOrigemTilesetAbsoluta = $ArqTMX.getParent() + bar + $UrlOrigemTileset;
							 if (FileClass.seExiste($UrlOrigemTilesetAbsoluta)) {
								 //Element $ImagemTag = (Element) $TilesetTag.getChildNodes().item($t);
								 System.out.println("Copiando: " + $UrlOrigemTilesetAbsoluta);
								 File $Handler = new File($UrlOrigemTilesetAbsoluta);
								 String $NomeArqTileset = $Handler.getName();
								 String $UrlDestinoTilesetAbsoluto = pastaDeTilesets + bar + $NomeArqTileset;
								 String $UrlDestinoTilesetRelativo = "../graphics/tiles/" + $NomeArqTileset;
								 $ImagemTag.setAttribute("source", $UrlDestinoTilesetRelativo);
								 if (!FileClass.seExiste($UrlDestinoTilesetAbsoluto)) {
									 FileClass.arquivoCopiar($UrlOrigemTilesetAbsoluta, $UrlDestinoTilesetAbsoluto);
								 }else{
									 DialogClass.showErro("<html>Já existe o '<font color='#FF0000'>"+$NomeArqTileset+"</font>' na pasta de Tileste!", "FALHA AO COPIAR TILESET");
								 }
							 }else{
								 DialogClass.showErro("<html>Não possivel encontrar o tileset '<font color='#FF0000'>" + $UrlOrigemTilesetAbsoluta + "</font>' !", "FALHA AO COPIAR TILESET");
							 }/**/
						 }
					 }
				 }
			 }
		 }

		 if (!$ArqTMX.getPath().equals($UrlDestinoTMX)) {
			 //FileClass.arquivoCopiar($ArqTMX, $UrlDestinoTMX);
			 FileClass.arquivoSalvarXML($UrlDestinoTMX,$NovoMapaTMX.getOwnerDocument()); // ← Salva o arquivo com endereço de tilesets alterados.
		 } else {
			 System.out.println("Não é possível importar o mapa '"+$ArqTMX.getName()+"' devolta para sua pasta de origem!");
		 }

		 File $ArqWLK = new File(txtColisoesWLK.getText());
		 String $UrlDestinoWLK = pastaDeColisoes + bar + $ArqWLK.getName();
		 if (!$ArqWLK.getPath().equals($UrlDestinoWLK)) {
			 FileClass.arquivoCopiar($ArqWLK, $UrlDestinoWLK);
		 } else {
			 System.out.println("Não é possível importar o mapa '"+$ArqWLK.getName()+"' devolta para sua pasta de origem!");
		 }

		 //################################################################################################################
		 String $UrlDosNPCsdoMapa = "", $PastaDosNPCsdoMapa = "";
		 NodeList noPropriedades = $ConteudoMapaTMX.getElementsByTagName("property");
		 for (int i = 0; i < noPropriedades.getLength(); i++) {
			 Element tagPropriedade = (Element) noPropriedades.item(i);
			 if (FileClass.getAtributo(tagPropriedade, "name", "").toLowerCase().equals("pasta")) {
				 //##########################################################################################################
				 $PastaDosNPCsdoMapa = FileClass.getAtributo(tagPropriedade, "value", "");
				 $UrlDosNPCsdoMapa = pastaLocalhost + bar + "eathena-data" + bar + "npc" + bar + $PastaDosNPCsdoMapa;
				 if (!FileClass.seExiste($UrlDosNPCsdoMapa)) {
					 System.out.println("Criando a pasta '" + $PastaDosNPCsdoMapa + "' para NPCs no repositório!");
					 FileClass.pastaCriar($UrlDosNPCsdoMapa);
				 } else {
					 System.out.println("Ja existe uma pasta '" + $PastaDosNPCsdoMapa + "' para NPCs deste mapa!");
				 }
				 //##########################################################################################################
				 System.out.println("Importanto mapa '" + $PastaDosNPCsdoMapa + "' para repositório!");
				 String $Import = $UrlDosNPCsdoMapa + bar + "_import.txt";
				 String $GatFile=$ArqWLK.getName().replaceAll("wlk", "gat");
				 if (!FileClass.seExiste($Import)) {FileClass.arquivoSalvar($Import,"map: "+$GatFile+"\n");}
				 //##########################################################################################################
				 String $ImportPrincipal = pastaLocalhost + bar + "eathena-data" + bar + "npc" + bar + "_import.txt";
				 if (FileClass.seExiste($ImportPrincipal)) {
					 String $Conteudo = FileClass.arquivoAbrir($ImportPrincipal);
					 if($Conteudo.indexOf($PastaDosNPCsdoMapa)<0){
						$Conteudo+="\nimport: npc"+bar+$PastaDosNPCsdoMapa+bar+"_import.txt";
						FileClass.arquivoSalvar($ImportPrincipal,$Conteudo);
					 }
				 }
				 //##########################################################################################################
				 String $ImportColisions = pastaLocalhost + bar + "eathena-data" + bar + "data" + bar + "resnametable.txt";
				 if (FileClass.seExiste($ImportColisions)) {
					 String $Conteudo = FileClass.arquivoAbrir($ImportColisions);

					 if($Conteudo.indexOf($GatFile)<0){
						$Conteudo+="\n"+$GatFile+"#"+$ArqWLK.getName()+"#";
						FileClass.arquivoSalvar($ImportColisions,$Conteudo);
					 }
				 }
				 //##########################################################################################################
				 frmImportador.MapaCompilar($ArqTMX.getName());
			 }
		 }/**/

		 frmImportador.MapasListar();
		 this.dispose();
	 }//GEN-LAST:event_btnImportarActionPerformed

	/**
	 * @param args the command line arguments
	 */
	/*public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {

			public void run() {
				FrmMapaImportador dialog = new FrmMapaImportador(new javax.swing.JDialog(), true, "");
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {

					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}/**/
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton btnCancelar;
   private javax.swing.JButton btnImportar;
   private javax.swing.JButton btnSelecionarTMX;
   private javax.swing.JButton btnSelecionarWLK;
   private javax.swing.JCheckBox chkAddTilesets;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JTextField txtColisoesWLK;
   private javax.swing.JTextField txtMapaTMX;
   // End of variables declaration//GEN-END:variables
}
